
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import { FileText, Download, Calendar, TrendingUp, Users } from "lucide-react";

const ReportsSection = () => {
  const [contributions, setContributions] = useState([]);
  const [reportPeriod, setReportPeriod] = useState('this-month');
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    const stored = localStorage.getItem('contributions');
    if (stored) {
      setContributions(JSON.parse(stored));
    }
  }, []);

  const generatePDFReport = async () => {
    setIsGenerating(true);
    
    try {
      // Simulate PDF generation
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // In a real app, this would generate and download an actual PDF
      const reportData = generateReportData();
      
      // Create a simple text-based report (in real app, use a PDF library like jsPDF)
      const reportContent = createReportContent(reportData);
      
      // Create and download file
      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `contribution-report-${reportPeriod}-${Date.now()}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);

      toast({
        title: "Report Generated",
        description: "Your contribution report has been downloaded successfully.",
      });
    } catch (error) {
      toast({
        title: "Generation Failed",
        description: "There was an error generating the report. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const generateReportData = () => {
    const now = new Date();
    let filteredContributions = [...contributions];

    // Filter by period
    if (reportPeriod === 'this-month') {
      filteredContributions = contributions.filter(c => {
        const date = new Date(c.timestamp);
        return date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear();
      });
    } else if (reportPeriod === 'last-month') {
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1);
      filteredContributions = contributions.filter(c => {
        const date = new Date(c.timestamp);
        return date.getMonth() === lastMonth.getMonth() && date.getFullYear() === lastMonth.getFullYear();
      });
    }

    const totalAmount = filteredContributions.reduce((sum, c) => sum + parseInt(c.amount), 0);
    const totalContributors = new Set(filteredContributions.map(c => c.contributorName)).size;
    const avgContribution = filteredContributions.length > 0 ? totalAmount / filteredContributions.length : 0;

    return {
      period: reportPeriod,
      contributions: filteredContributions,
      totalAmount,
      totalContributors,
      totalTransactions: filteredContributions.length,
      avgContribution
    };
  };

  const createReportContent = (data: any) => {
    const formatTSH = (amount: number) => {
      return new Intl.NumberFormat('sw-TZ', {
        style: 'currency',
        currency: 'TZS',
        minimumFractionDigits: 0
      }).format(amount);
    };

    let content = `
COMMUNITY CONTRIBUTION REPORT
Generated: ${new Date().toLocaleString()}
Period: ${data.period.replace('-', ' ').toUpperCase()}

SUMMARY
=======
Total Amount Collected: ${formatTSH(data.totalAmount)}
Total Contributors: ${data.totalContributors}
Total Transactions: ${data.totalTransactions}
Average Contribution: ${formatTSH(data.avgContribution)}

DETAILED TRANSACTIONS
====================
`;

    data.contributions.forEach((contrib: any, index: number) => {
      content += `
${index + 1}. ${contrib.contributorName}
   Amount: ${formatTSH(parseInt(contrib.amount))}
   Phone: ${contrib.phoneNumber}
   Date: ${new Date(contrib.timestamp).toLocaleString()}
   Purpose: ${contrib.purpose || 'General contribution'}
   Status: ${contrib.status.toUpperCase()}
   `;
    });

    content += `

Report generated by Mchango Community Platform
Tanzania Mobile Money Integration System
`;

    return content;
  };

  const reportData = generateReportData();

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center text-lg">
            <FileText className="w-5 h-5 mr-2 text-blue-600" />
            Generate Reports
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <label className="text-sm font-medium">Report Period</label>
            <Select value={reportPeriod} onValueChange={setReportPeriod}>
              <SelectTrigger>
                <SelectValue placeholder="Select report period" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="this-month">This Month</SelectItem>
                <SelectItem value="last-month">Last Month</SelectItem>
                <SelectItem value="all-time">All Time</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <Button 
            onClick={generatePDFReport}
            disabled={isGenerating || contributions.length === 0}
            className="w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800"
          >
            {isGenerating ? (
              <>Generating Report...</>
            ) : (
              <>
                <Download className="w-4 h-4 mr-2" />
                Download PDF Report
              </>
            )}
          </Button>
        </CardContent>
      </Card>

      {/* Report Preview */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg">Report Preview</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 gap-4 mb-4">
            <div className="bg-green-50 p-3 rounded-lg">
              <div className="flex items-center space-x-2">
                <TrendingUp className="w-4 h-4 text-green-600" />
                <span className="text-sm font-medium">Total Amount</span>
              </div>
              <div className="text-lg font-bold text-green-700">
                {new Intl.NumberFormat('sw-TZ', {
                  style: 'currency',
                  currency: 'TZS',
                  minimumFractionDigits: 0
                }).format(reportData.totalAmount)}
              </div>
            </div>

            <div className="bg-blue-50 p-3 rounded-lg">
              <div className="flex items-center space-x-2">
                <Users className="w-4 h-4 text-blue-600" />
                <span className="text-sm font-medium">Contributors</span>
              </div>
              <div className="text-lg font-bold text-blue-700">
                {reportData.totalContributors}
              </div>
            </div>
          </div>

          <div className="text-sm text-gray-600 space-y-1">
            <p>ðŸ“Š {reportData.totalTransactions} total transactions</p>
            <p>ðŸ’° Average contribution: {new Intl.NumberFormat('sw-TZ', {
              style: 'currency',
              currency: 'TZS',
              minimumFractionDigits: 0
            }).format(reportData.avgContribution)}</p>
            <p>ðŸ“± Multi-provider mobile money support</p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default ReportsSection;
